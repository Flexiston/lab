"use strict";var Camera=function(){var e=INITIAL_AZIMUTH,r=INITIAL_ELEVATION,o=makeIdentityMatrix(new Float32Array(16)),t=new Float32Array(3),i=!0;this.changeAzimuth=function(o){e+=o,e=clamp(e,MIN_AZIMUTH,MAX_AZIMUTH),i=!0},this.changeElevation=function(o){r+=o,r=clamp(r,MIN_ELEVATION,MAX_ELEVATION),i=!0},this.getPosition=function(){return t};var a=makeIdentityMatrix(new Float32Array(16)),n=new Float32Array(16),u=new Float32Array(16),_=makeIdentityMatrix(new Float32Array(16));this.getViewMatrix=function(){return i&&(makeIdentityMatrix(o),makeXRotationMatrix(n,r),makeYRotationMatrix(u,e),_[14]=-CAMERA_DISTANCE,a[12]=-ORBIT_POINT[0],a[13]=-ORBIT_POINT[1],a[14]=-ORBIT_POINT[2],premultiplyMatrix(o,o,a),premultiplyMatrix(o,o,u),premultiplyMatrix(o,o,n),premultiplyMatrix(o,o,_),t[0]=CAMERA_DISTANCE*Math.sin(Math.PI/2-r)*Math.sin(-e)+ORBIT_POINT[0],t[1]=CAMERA_DISTANCE*Math.cos(Math.PI/2-r)+ORBIT_POINT[1],t[2]=CAMERA_DISTANCE*Math.sin(Math.PI/2-r)*Math.cos(-e)+ORBIT_POINT[2],i=!1),o}},FULLSCREEN_VERTEX_SOURCE=["attribute vec2 a_position;","varying vec2 v_coordinates;","void main (void) {","v_coordinates = a_position * 0.5 + 0.5;","gl_Position = vec4(a_position, 0.0, 1.0);","}"].join("\n"),SUBTRANSFORM_FRAGMENT_SOURCE=["precision highp float;","const float PI = 3.14159265359;","uniform sampler2D u_input;","uniform float u_transformSize;","uniform float u_subtransformSize;","varying vec2 v_coordinates;","vec2 multiplyComplex (vec2 a, vec2 b) {","return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);","}","void main (void) {","#ifdef HORIZONTAL","float index = v_coordinates.x * u_transformSize - 0.5;","#else","float index = v_coordinates.y * u_transformSize - 0.5;","#endif","float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);","#ifdef HORIZONTAL","vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;","vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;","#else","vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;","vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;","#endif","float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);","vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));","vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);","vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);","gl_FragColor = vec4(outputA, outputB);","}"].join("\n"),INITIAL_SPECTRUM_FRAGMENT_SOURCE=["precision highp float;","const float PI = 3.14159265359;","const float G = 9.81;","const float KM = 370.0;","const float CM = 0.23;","uniform vec2 u_wind;","uniform float u_resolution;","uniform float u_size;","float square (float x) {","return x * x;","}","float omega (float k) {","return sqrt(G * k * (1.0 + square(k / KM)));","}","float tanh (float x) {","return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));","}","void main (void) {","vec2 coordinates = gl_FragCoord.xy - 0.5;","float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;","float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;","vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;","float k = length(waveVector);","float U10 = length(u_wind);","float Omega = 0.84;","float kp = G * square(Omega / U10);","float c = omega(k) / k;","float cp = omega(kp) / kp;","float Lpm = exp(-1.25 * square(kp / k));","float gamma = 1.7;","float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));","float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));","float Jp = pow(gamma, Gamma);","float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));","float alphap = 0.006 * sqrt(Omega);","float Bl = 0.5 * alphap * cp / c * Fp;","float z0 = 0.000037 * square(U10) / G * pow(U10 / cp, 0.9);","float uStar = 0.41 * U10 / log(10.0 / z0);","float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));","float Fm = exp(-0.25 * square(k / KM - 1.0));","float Bh = 0.5 * alpham * CM / c * Fm * Lpm;","float a0 = log(2.0) / 4.0;","float am = 0.13 * uStar / CM;","float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));","float cosPhi = dot(normalize(u_wind), normalize(waveVector));","float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));","float dk = 2.0 * PI / u_size;","float h = sqrt(S / 2.0) * dk;","if (waveVector.x == 0.0 && waveVector.y == 0.0) {","h = 0.0;","}","gl_FragColor = vec4(h, 0.0, 0.0, 0.0);","}"].join("\n"),PHASE_FRAGMENT_SOURCE=["precision highp float;","const float PI = 3.14159265359;","const float G = 9.81;","const float KM = 370.0;","varying vec2 v_coordinates;","uniform sampler2D u_phases;","uniform float u_deltaTime;","uniform float u_resolution;","uniform float u_size;","float omega (float k) {","return sqrt(G * k * (1.0 + k * k / KM * KM));","}","void main (void) {","float deltaTime = 1.0 / 60.0;","vec2 coordinates = gl_FragCoord.xy - 0.5;","float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;","float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;","vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;","float phase = texture2D(u_phases, v_coordinates).r;","float deltaPhase = omega(length(waveVector)) * u_deltaTime;","phase = mod(phase + deltaPhase, 2.0 * PI);","gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);","}"].join("\n"),SPECTRUM_FRAGMENT_SOURCE=["precision highp float;","const float PI = 3.14159265359;","const float G = 9.81;","const float KM = 370.0;","varying vec2 v_coordinates;","uniform float u_size;","uniform float u_resolution;","uniform sampler2D u_phases;","uniform sampler2D u_initialSpectrum;","uniform float u_choppiness;","vec2 multiplyComplex (vec2 a, vec2 b) {","return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);","}","vec2 multiplyByI (vec2 z) {","return vec2(-z[1], z[0]);","}","float omega (float k) {","return sqrt(G * k * (1.0 + k * k / KM * KM));","}","void main (void) {","vec2 coordinates = gl_FragCoord.xy - 0.5;","float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;","float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;","vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;","float phase = texture2D(u_phases, v_coordinates).r;","vec2 phaseVector = vec2(cos(phase), sin(phase));","vec2 h0 = texture2D(u_initialSpectrum, v_coordinates).rg;","vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - v_coordinates + 1.0 / u_resolution)).rg;","h0Star.y *= -1.0;","vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));","vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;","vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;","if (waveVector.x == 0.0 && waveVector.y == 0.0) {","h = vec2(0.0);","hX = vec2(0.0);","hZ = vec2(0.0);","}","gl_FragColor = vec4(hX + multiplyByI(h), hZ);","}"].join("\n"),NORMAL_MAP_FRAGMENT_SOURCE=["precision highp float;","varying vec2 v_coordinates;","uniform sampler2D u_displacementMap;","uniform float u_resolution;","uniform float u_size;","void main (void) {","float texel = 1.0 / u_resolution;","float texelSize = u_size / u_resolution;","vec3 center = texture2D(u_displacementMap, v_coordinates).rgb;","vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, v_coordinates + vec2(texel, 0.0)).rgb - center;","vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, v_coordinates + vec2(-texel, 0.0)).rgb - center;","vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, v_coordinates + vec2(0.0, -texel)).rgb - center;","vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, v_coordinates + vec2(0.0, texel)).rgb - center;","vec3 topRight = cross(right, top);","vec3 topLeft = cross(top, left);","vec3 bottomLeft = cross(left, bottom);","vec3 bottomRight = cross(bottom, right);","gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);","}"].join("\n"),OCEAN_VERTEX_SOURCE=["precision highp float;","attribute vec3 a_position;","attribute vec2 a_coordinates;","varying vec3 v_position;","varying vec2 v_coordinates;","uniform mat4 u_projectionMatrix;","uniform mat4 u_viewMatrix;","uniform float u_size;","uniform float u_geometrySize;","uniform sampler2D u_displacementMap;","void main (void) {","vec3 position = a_position + texture2D(u_displacementMap, a_coordinates).rgb * (u_geometrySize / u_size);","v_position = position;","v_coordinates = a_coordinates;","gl_Position = u_projectionMatrix * u_viewMatrix * vec4(position, 1.0);","}"].join("\n"),OCEAN_FRAGMENT_SOURCE=["precision highp float;","varying vec2 v_coordinates;","varying vec3 v_position;","uniform sampler2D u_displacementMap;","uniform sampler2D u_normalMap;","uniform vec3 u_cameraPosition;","uniform vec3 u_oceanColor;","uniform vec3 u_skyColor;","uniform float u_exposure;","uniform vec3 u_sunDirection;","vec3 hdr (vec3 color, float exposure) {","return 1.0 - exp(-color * exposure);","}","void main (void) {","vec3 normal = texture2D(u_normalMap, v_coordinates).rgb;","vec3 view = normalize(u_cameraPosition - v_position);","float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);","vec3 sky = fresnel * u_skyColor;","float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);","vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;","vec3 color = sky + water;","gl_FragColor = vec4(hdr(color, u_exposure), 1.0);","}"].join("\n"),Simulator=function(u,o,e){(u=u).width=o,u.height=e;var _=u.getContext("webgl")||u.getContext("experimental-webgl"),s=INITIAL_WIND[0],l=INITIAL_WIND[1],f=INITIAL_SIZE,E=INITIAL_CHOPPINESS,m=!0;_.getExtension("OES_texture_float"),_.getExtension("OES_texture_float_linear"),_.clearColor.apply(_,CLEAR_COLOR),_.enable(_.DEPTH_TEST);var r=buildShader(_,_.VERTEX_SHADER,FULLSCREEN_VERTEX_SOURCE),c=buildProgramWrapper(_,r,buildShader(_,_.FRAGMENT_SHADER,"#define HORIZONTAL \n"+SUBTRANSFORM_FRAGMENT_SOURCE),{a_position:0});_.useProgram(c.program),_.uniform1f(c.uniformLocations.u_transformSize,RESOLUTION);var R=buildProgramWrapper(_,r,buildShader(_,_.FRAGMENT_SHADER,SUBTRANSFORM_FRAGMENT_SOURCE),{a_position:0});_.useProgram(R.program),_.uniform1f(R.uniformLocations.u_transformSize,RESOLUTION);var T=buildProgramWrapper(_,r,buildShader(_,_.FRAGMENT_SHADER,INITIAL_SPECTRUM_FRAGMENT_SOURCE),{a_position:0});_.useProgram(T.program),_.uniform1f(T.uniformLocations.u_resolution,RESOLUTION);var O=buildProgramWrapper(_,r,buildShader(_,_.FRAGMENT_SHADER,PHASE_FRAGMENT_SOURCE),{a_position:0});_.useProgram(O.program),_.uniform1f(O.uniformLocations.u_resolution,RESOLUTION);var p=buildProgramWrapper(_,r,buildShader(_,_.FRAGMENT_SHADER,SPECTRUM_FRAGMENT_SOURCE),{a_position:0});_.useProgram(p.program),_.uniform1i(p.uniformLocations.u_initialSpectrum,INITIAL_SPECTRUM_UNIT),_.uniform1f(p.uniformLocations.u_resolution,RESOLUTION);var A=buildProgramWrapper(_,r,buildShader(_,_.FRAGMENT_SHADER,NORMAL_MAP_FRAGMENT_SOURCE),{a_position:0});_.useProgram(A.program),_.uniform1i(A.uniformLocations.u_displacementMap,DISPLACEMENT_MAP_UNIT),_.uniform1f(A.uniformLocations.u_resolution,RESOLUTION);var d=buildProgramWrapper(_,buildShader(_,_.VERTEX_SHADER,OCEAN_VERTEX_SOURCE),buildShader(_,_.FRAGMENT_SHADER,OCEAN_FRAGMENT_SOURCE),{a_position:0,a_coordinates:OCEAN_COORDINATES_UNIT});_.useProgram(d.program),_.uniform1f(d.uniformLocations.u_geometrySize,GEOMETRY_SIZE),_.uniform1i(d.uniformLocations.u_displacementMap,DISPLACEMENT_MAP_UNIT),_.uniform1i(d.uniformLocations.u_normalMap,NORMAL_MAP_UNIT),_.uniform3f(d.uniformLocations.u_oceanColor,OCEAN_COLOR[0],OCEAN_COLOR[1],OCEAN_COLOR[2]),_.uniform3f(d.uniformLocations.u_skyColor,SKY_COLOR[0],SKY_COLOR[1],SKY_COLOR[2]),_.uniform3f(d.uniformLocations.u_sunDirection,SUN_DIRECTION[0],SUN_DIRECTION[1],SUN_DIRECTION[2]),_.uniform1f(d.uniformLocations.u_exposure,EXPOSURE),_.enableVertexAttribArray(0);var I=_.createBuffer();_.bindBuffer(_.ARRAY_BUFFER,I),_.bufferData(_.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,-1,1,1]),_.STATIC_DRAW);for(var t=[],i=0;i<GEOMETRY_RESOLUTION;i+=1)for(var a=0;a<GEOMETRY_RESOLUTION;a+=1)t.push(a*GEOMETRY_SIZE/(GEOMETRY_RESOLUTION-1)+GEOMETRY_ORIGIN[0]),t.push(0),t.push(i*GEOMETRY_SIZE/(GEOMETRY_RESOLUTION-1)+GEOMETRY_ORIGIN[1]),t.push(a/(GEOMETRY_RESOLUTION-1)),t.push(i/(GEOMETRY_RESOLUTION-1));for(var v=[],i=0;i<GEOMETRY_RESOLUTION-1;i+=1)for(a=0;a<GEOMETRY_RESOLUTION-1;a+=1){var n=i*GEOMETRY_RESOLUTION+a,S=n+1,N=n+GEOMETRY_RESOLUTION,M=N+1;v.push(n),v.push(N),v.push(M),v.push(M),v.push(S),v.push(n)}var L=_.createBuffer();_.bindBuffer(_.ARRAY_BUFFER,L),_.bufferData(_.ARRAY_BUFFER,new Float32Array(t),_.STATIC_DRAW),_.vertexAttribPointer(OCEAN_COORDINATES_UNIT,2,_.FLOAT,!1,5*SIZE_OF_FLOAT,3*SIZE_OF_FLOAT);var g=_.createBuffer();_.bindBuffer(_.ELEMENT_ARRAY_BUFFER,g),_.bufferData(_.ELEMENT_ARRAY_BUFFER,new Uint16Array(v),_.STATIC_DRAW);for(var F=buildTexture(_,INITIAL_SPECTRUM_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.REPEAT,_.REPEAT,_.NEAREST,_.NEAREST),h=buildTexture(_,PONG_PHASE_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.NEAREST,_.NEAREST),U=buildTexture(_,SPECTRUM_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.NEAREST,_.NEAREST),P=buildTexture(_,DISPLACEMENT_MAP_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.LINEAR,_.LINEAR),C=buildTexture(_,NORMAL_MAP_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.LINEAR,_.LINEAR),x=buildTexture(_,PING_TRANSFORM_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.NEAREST,_.NEAREST),b=buildTexture(_,PONG_TRANSFORM_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,null,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.NEAREST,_.NEAREST),G=!0,y=new Float32Array(RESOLUTION*RESOLUTION*4),D=0;D<RESOLUTION;D+=1)for(var w=0;w<RESOLUTION;w+=1)y[D*RESOLUTION*4+4*w]=2*Math.random()*Math.PI,y[D*RESOLUTION*4+4*w+1]=0,y[D*RESOLUTION*4+4*w+2]=0,y[D*RESOLUTION*4+4*w+3]=0;var z=buildTexture(_,PING_PHASE_UNIT,_.RGBA,_.FLOAT,RESOLUTION,RESOLUTION,y,_.CLAMP_TO_EDGE,_.CLAMP_TO_EDGE,_.NEAREST,_.NEAREST),B=buildFramebuffer(_,F),k=buildFramebuffer(_,z),V=buildFramebuffer(_,h),H=buildFramebuffer(_,U),Y=buildFramebuffer(_,P),q=buildFramebuffer(_,C),Z=buildFramebuffer(_,x),W=buildFramebuffer(_,b);this.setWind=function(o,e){s=o,l=e,m=!0},this.setSize=function(o){f=o,m=!0},this.setChoppiness=function(o){E=o},this.resize=function(o,e){u.width=o,u.height=e},this.render=function(o,e,r,t){_.viewport(0,0,RESOLUTION,RESOLUTION),_.disable(_.DEPTH_TEST),_.bindBuffer(_.ARRAY_BUFFER,I),_.vertexAttribPointer(0,2,_.FLOAT,!1,0,0),m&&(_.bindFramebuffer(_.FRAMEBUFFER,B),_.useProgram(T.program),_.uniform2f(T.uniformLocations.u_wind,s,l),_.uniform1f(T.uniformLocations.u_size,f),_.drawArrays(_.TRIANGLE_STRIP,0,4)),_.useProgram(O.program),_.bindFramebuffer(_.FRAMEBUFFER,G?V:k),_.uniform1i(O.uniformLocations.u_phases,G?PING_PHASE_UNIT:PONG_PHASE_UNIT),G=!G,_.uniform1f(O.uniformLocations.u_deltaTime,o),_.uniform1f(O.uniformLocations.u_size,f),_.drawArrays(_.TRIANGLE_STRIP,0,4),_.useProgram(p.program),_.bindFramebuffer(_.FRAMEBUFFER,H),_.uniform1i(p.uniformLocations.u_phases,G?PING_PHASE_UNIT:PONG_PHASE_UNIT),_.uniform1f(p.uniformLocations.u_size,f),_.uniform1f(p.uniformLocations.u_choppiness,E),_.drawArrays(_.TRIANGLE_STRIP,0,4);var i=c;_.useProgram(c.program);for(var a=2*log2(RESOLUTION),n=0;n<a;n+=1)0===n?(_.bindFramebuffer(_.FRAMEBUFFER,Z),_.uniform1i(i.uniformLocations.u_input,SPECTRUM_UNIT)):n===a-1?(_.bindFramebuffer(_.FRAMEBUFFER,Y),_.uniform1i(i.uniformLocations.u_input,a%2==0?PING_TRANSFORM_UNIT:PONG_TRANSFORM_UNIT)):n%2==1?(_.bindFramebuffer(_.FRAMEBUFFER,W),_.uniform1i(i.uniformLocations.u_input,PING_TRANSFORM_UNIT)):(_.bindFramebuffer(_.FRAMEBUFFER,Z),_.uniform1i(i.uniformLocations.u_input,PONG_TRANSFORM_UNIT)),n===a/2&&(i=R,_.useProgram(R.program)),_.uniform1f(i.uniformLocations.u_subtransformSize,Math.pow(2,n%(a/2)+1)),_.drawArrays(_.TRIANGLE_STRIP,0,4);_.bindFramebuffer(_.FRAMEBUFFER,q),_.useProgram(A.program),m&&_.uniform1f(A.uniformLocations.u_size,f),_.drawArrays(_.TRIANGLE_STRIP,0,4),_.bindFramebuffer(_.FRAMEBUFFER,null),_.viewport(0,0,u.width,u.height),_.enable(_.DEPTH_TEST),_.clear(_.COLOR_BUFFER_BIT|_.DEPTH_BUFFER_BIT),_.enableVertexAttribArray(OCEAN_COORDINATES_UNIT),_.bindBuffer(_.ARRAY_BUFFER,L),_.vertexAttribPointer(0,3,_.FLOAT,!1,5*SIZE_OF_FLOAT,0),_.useProgram(d.program),m&&(_.uniform1f(d.uniformLocations.u_size,f),m=!1),_.uniformMatrix4fv(d.uniformLocations.u_projectionMatrix,!1,e),_.uniformMatrix4fv(d.uniformLocations.u_viewMatrix,!1,r),_.uniform3fv(d.uniformLocations.u_cameraPosition,t),_.drawElements(_.TRIANGLES,v.length,_.UNSIGNED_SHORT,0),_.disableVertexAttribArray(OCEAN_COORDINATES_UNIT)}};